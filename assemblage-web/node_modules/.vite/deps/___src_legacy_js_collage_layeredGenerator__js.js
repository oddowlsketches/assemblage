import "./chunk-BUSYA2B4.js";

// src/legacy/js/collage/layeredGenerator.js
var LayeredGenerator = class {
  constructor(canvas, ctx) {
    this.canvas = canvas;
    this.ctx = ctx;
  }
  calculateRequiredScale(image, targetWidth, targetHeight, minVisibility = 0.7) {
    const imgRatio = image.naturalWidth / image.naturalHeight;
    const targetRatio = targetWidth / targetHeight;
    let scale;
    if (imgRatio > targetRatio) {
      scale = targetHeight / image.naturalHeight;
    } else {
      scale = targetWidth / image.naturalWidth;
    }
    const minScale = Math.max(
      minVisibility / imgRatio,
      minVisibility * imgRatio
    );
    return Math.max(scale, minScale);
  }
  generateLayers(images, parameters = {}) {
    if (!images || images.length === 0) {
      console.warn("No images provided for layered effect");
      return;
    }
    console.log(`Generating layered effect with ${images.length} images`);
    const numLayers = Math.floor(Math.random() * 4) + 2;
    console.log(`Creating ${numLayers} layers`);
    const layers = [];
    const MAX_ATTEMPTS = 5;
    for (let i = 0; i < numLayers; i++) {
      let suitableImage = null;
      let attempts = 0;
      while (!suitableImage && attempts < MAX_ATTEMPTS) {
        const randomImage = images[Math.floor(Math.random() * images.length)];
        if (!randomImage || !randomImage.complete || randomImage.naturalWidth === 0) {
          attempts++;
          continue;
        }
        const requiredScale = this.calculateRequiredScale(
          randomImage,
          this.canvas.width,
          this.canvas.height
        );
        if (requiredScale <= 1.2) {
          suitableImage = randomImage;
        } else {
          attempts++;
        }
      }
      if (!suitableImage) {
        console.warn(`Could not find suitable image after ${MAX_ATTEMPTS} attempts`);
        continue;
      }
      const scale = 0.7 + Math.random() * 0.5;
      const x = Math.random() * this.canvas.width * 1.2 - this.canvas.width * 0.1;
      const y = Math.random() * this.canvas.height * 1.2 - this.canvas.height * 0.1;
      layers.push({
        image: suitableImage,
        scale,
        x,
        y,
        opacity: i === 0 ? 1 : 0.3 + Math.random() * 0.4
        // First layer full opacity, others 0.3-0.7
      });
    }
    layers.sort((a, b) => a.scale - b.scale);
    layers.forEach((layer) => {
      const { image, scale, x, y, opacity } = layer;
      const aspectRatio = image.width / image.height;
      let width = this.canvas.width * scale;
      let height = width / aspectRatio;
      if (height < this.canvas.height * 0.7) {
        height = this.canvas.height * 0.7;
        width = height * aspectRatio;
      }
      this.ctx.globalAlpha = opacity;
      this.ctx.drawImage(image, x, y, width, height);
    });
    this.ctx.globalAlpha = 1;
    return layers;
  }
};
export {
  LayeredGenerator
};
//# sourceMappingURL=___src_legacy_js_collage_layeredGenerator__js.js.map
