{
  "version": 3,
  "sources": ["../../../src/legacy/js/collage/maskImplementations.js"],
  "sourcesContent": ["const maskImplementations = {\n    diamond: {\n        draw: (ctx, width, height) => {\n            const centerX = width / 2;\n            const centerY = height / 2;\n            const size = Math.min(width, height) * 0.8; // Scale to 80% of the smaller dimension\n            \n            ctx.beginPath();\n            ctx.moveTo(centerX, centerY - size/2); // Top\n            ctx.lineTo(centerX + size/2, centerY); // Right\n            ctx.lineTo(centerX, centerY + size/2); // Bottom\n            ctx.lineTo(centerX - size/2, centerY); // Left\n            ctx.closePath();\n        }\n    },\n    hexagon: {\n        draw: (ctx, width, height) => {\n            const centerX = width / 2;\n            const centerY = height / 2;\n            const size = Math.min(width, height) * 0.8; // Scale to 80% of the smaller dimension\n            const sides = 6;\n            const angle = (Math.PI * 2) / sides;\n            \n            ctx.beginPath();\n            for (let i = 0; i < sides; i++) {\n                const x = centerX + size * Math.cos(angle * i);\n                const y = centerY + size * Math.sin(angle * i);\n                if (i === 0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n            }\n            ctx.closePath();\n        }\n    },\n    star: {\n        draw: (ctx, width, height) => {\n            const centerX = width / 2;\n            const centerY = height / 2;\n            const size = Math.min(width, height) * 0.8; // Scale to 80% of the smaller dimension\n            const spikes = 5;\n            const outerRadius = size / 2;\n            const innerRadius = outerRadius * 0.4;\n            \n            ctx.beginPath();\n            for (let i = 0; i < spikes * 2; i++) {\n                const radius = i % 2 === 0 ? outerRadius : innerRadius;\n                const angle = (Math.PI * 2 * i) / (spikes * 2);\n                const x = centerX + radius * Math.cos(angle);\n                const y = centerY + radius * Math.sin(angle);\n                if (i === 0) ctx.moveTo(x, y);\n                else ctx.lineTo(x, y);\n            }\n            ctx.closePath();\n        }\n    },\n    arc: {\n        draw: (ctx, width, height) => {\n            const centerX = width / 2;\n            const centerY = height / 2;\n            const radius = Math.min(width, height) * 0.4; // Scale to 40% of the smaller dimension\n            \n            ctx.beginPath();\n            ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n            ctx.closePath();\n        }\n    },\n    arch: {\n        draw: (ctx, width, height) => {\n            const centerX = width / 2;\n            const centerY = height / 2;\n            const radius = Math.min(width, height) * 0.4; // Scale to 40% of the smaller dimension\n            \n            ctx.beginPath();\n            ctx.arc(centerX, centerY, radius, Math.PI * 0.2, Math.PI * 1.8);\n            ctx.closePath();\n        }\n    }\n};\n\nexport default maskImplementations; "],
  "mappings": ";;;AAAA,IAAM,sBAAsB;AAAA,EACxB,SAAS;AAAA,IACL,MAAM,CAAC,KAAK,OAAO,WAAW;AAC1B,YAAM,UAAU,QAAQ;AACxB,YAAM,UAAU,SAAS;AACzB,YAAM,OAAO,KAAK,IAAI,OAAO,MAAM,IAAI;AAEvC,UAAI,UAAU;AACd,UAAI,OAAO,SAAS,UAAU,OAAK,CAAC;AACpC,UAAI,OAAO,UAAU,OAAK,GAAG,OAAO;AACpC,UAAI,OAAO,SAAS,UAAU,OAAK,CAAC;AACpC,UAAI,OAAO,UAAU,OAAK,GAAG,OAAO;AACpC,UAAI,UAAU;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,SAAS;AAAA,IACL,MAAM,CAAC,KAAK,OAAO,WAAW;AAC1B,YAAM,UAAU,QAAQ;AACxB,YAAM,UAAU,SAAS;AACzB,YAAM,OAAO,KAAK,IAAI,OAAO,MAAM,IAAI;AACvC,YAAM,QAAQ;AACd,YAAM,QAAS,KAAK,KAAK,IAAK;AAE9B,UAAI,UAAU;AACd,eAAS,IAAI,GAAG,IAAI,OAAO,KAAK;AAC5B,cAAM,IAAI,UAAU,OAAO,KAAK,IAAI,QAAQ,CAAC;AAC7C,cAAM,IAAI,UAAU,OAAO,KAAK,IAAI,QAAQ,CAAC;AAC7C,YAAI,MAAM,EAAG,KAAI,OAAO,GAAG,CAAC;AAAA,YACvB,KAAI,OAAO,GAAG,CAAC;AAAA,MACxB;AACA,UAAI,UAAU;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,IACF,MAAM,CAAC,KAAK,OAAO,WAAW;AAC1B,YAAM,UAAU,QAAQ;AACxB,YAAM,UAAU,SAAS;AACzB,YAAM,OAAO,KAAK,IAAI,OAAO,MAAM,IAAI;AACvC,YAAM,SAAS;AACf,YAAM,cAAc,OAAO;AAC3B,YAAM,cAAc,cAAc;AAElC,UAAI,UAAU;AACd,eAAS,IAAI,GAAG,IAAI,SAAS,GAAG,KAAK;AACjC,cAAM,SAAS,IAAI,MAAM,IAAI,cAAc;AAC3C,cAAM,QAAS,KAAK,KAAK,IAAI,KAAM,SAAS;AAC5C,cAAM,IAAI,UAAU,SAAS,KAAK,IAAI,KAAK;AAC3C,cAAM,IAAI,UAAU,SAAS,KAAK,IAAI,KAAK;AAC3C,YAAI,MAAM,EAAG,KAAI,OAAO,GAAG,CAAC;AAAA,YACvB,KAAI,OAAO,GAAG,CAAC;AAAA,MACxB;AACA,UAAI,UAAU;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,KAAK;AAAA,IACD,MAAM,CAAC,KAAK,OAAO,WAAW;AAC1B,YAAM,UAAU,QAAQ;AACxB,YAAM,UAAU,SAAS;AACzB,YAAM,SAAS,KAAK,IAAI,OAAO,MAAM,IAAI;AAEzC,UAAI,UAAU;AACd,UAAI,IAAI,SAAS,SAAS,QAAQ,GAAG,KAAK,KAAK,CAAC;AAChD,UAAI,UAAU;AAAA,IAClB;AAAA,EACJ;AAAA,EACA,MAAM;AAAA,IACF,MAAM,CAAC,KAAK,OAAO,WAAW;AAC1B,YAAM,UAAU,QAAQ;AACxB,YAAM,UAAU,SAAS;AACzB,YAAM,SAAS,KAAK,IAAI,OAAO,MAAM,IAAI;AAEzC,UAAI,UAAU;AACd,UAAI,IAAI,SAAS,SAAS,QAAQ,KAAK,KAAK,KAAK,KAAK,KAAK,GAAG;AAC9D,UAAI,UAAU;AAAA,IAClB;AAAA,EACJ;AACJ;AAEA,IAAO,8BAAQ;",
  "names": []
}
