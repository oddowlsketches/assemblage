/**
 * Narrative Composition Manager
 * Enhances collage compositions with narrative-focused layout and depth
 */

import { LLMCompositionEnhancer } from './js/llmCompositionEnhancer.js';

export class NarrativeCompositionManager {
    constructor(parameters = {}) {
        this.parameters = {
            // Visual Style
            backgroundColor: parameters.backgroundColor || null,
            blendMode: parameters.blendMode || 'multiply',
            backgroundColors: [
                '#f5e6e8', '#e6f5f0', '#f0e6f5', '#f5f0e6', '#e6e6f5',
                '#f5e6f0', '#e6f5f5', '#f5f5e6', '#e6e6e6', '#f5f5f5'
            ],
            
            // Composition Structure
            compositionType: parameters.compositionType || 'multiple-actors',
            flowPattern: parameters.flowPattern || 'left-to-right',
            rotationStrategy: parameters.rotationStrategy || 'relationship',
            maxRotation: parameters.maxRotation || 45,
            allowEdgeOverflow: parameters.allowEdgeOverflow !== false,
            
            // Element Management
            elementCount: parameters.elementCount || 7,
            overlapRatio: parameters.overlapRatio || 0.2,
            sizeVariation: parameters.sizeVariation || 3.5,
            focalScale: parameters.focalScale || 1.8,
            
            // Depth and Layering
            depthOpacity: parameters.depthOpacity !== false,
            depthOpacityRange: parameters.depthOpacityRange || 0.2,
            depthLayers: parameters.depthLayers || 3,
            
            // Narrative Focus
            foregroundEmphasis: parameters.foregroundEmphasis || 1.5,
            backgroundBlur: parameters.backgroundBlur || 0.3,
            narrativeFocus: parameters.narrativeFocus || 'protagonist',
            
            // Composition Style
            compositionStyle: parameters.compositionStyle || 'journey',
            negativeSpaceRatio: parameters.negativeSpaceRatio || 0.3,
            relationshipStrength: parameters.relationshipStrength || 0.8,
            
            // Flow and Movement
            flowIntensity: parameters.flowIntensity || 0.7,
            movementDirection: parameters.movementDirection || 'horizontal',
            tensionPoints: parameters.tensionPoints || 3,
            
            // LLM Integration
            useLLM: parameters.useLLM !== false,
            llmParameters: parameters.llmParameters || {}
        };

        // Predefined background colors (pastel/muted)
        this.backgroundColors = [
            '#f5f5f5', // Light gray
            '#f0f5e9', // Soft mint
            '#f5efed', // Pale pink
            '#e9f0f5', // Light blue
            '#f5f0e9', // Warm beige
            '#eff5f0', // Sage green
            '#f5e9f0', // Lavender
            '#f0e9f5', // Soft purple
            '#e9f5f0', // Mint green
            '#f5e9e9'  // Soft rose
        ];
        
        // Initialize LLM enhancer if enabled
        if (this.parameters.useLLM) {
            this.llmEnhancer = new LLMCompositionEnhancer(this.parameters.llmParameters);
        }
    }

    /**
     * Enhances a set of fragments with narrative composition
     * @param {Array} fragments - The fragments to enhance
     * @param {Object} parameters - Optional parameters to override defaults
     * @returns {Object} - Enhanced fragments and metadata
     */
    async enhanceComposition(fragments, parameters = {}) {
        // Merge provided parameters with defaults
        const params = { ...this.parameters, ...parameters };
        
        // Select background color if not specified
        if (!params.backgroundColor) {
            params.backgroundColor = params.backgroundColors[
                Math.floor(Math.random() * params.backgroundColors.length)
            ];
        }
        
        console.log('Enhancing composition with parameters:', params);
        
        // Try LLM enhancement if enabled
        if (params.useLLM && this.llmEnhancer) {
            try {
                console.log('Attempting LLM-enhanced composition...');
                const llmResult = await this.llmEnhancer.enhanceComposition(fragments);
                
                // If LLM enhancement succeeded, use its results
                if (llmResult && llmResult.metadata?.llmEnhanced) {
                    console.log('Using LLM-enhanced composition');
                    
                    // Apply background color if provided
                    if (llmResult.metadata.colorEmphasis) {
                        params.backgroundColor = llmResult.metadata.colorEmphasis;
                    }
                    
                    // Combine LLM results with our standard enhancements
                    const finalFragments = this.postProcessLLMFragments(llmResult.fragments, params);
                    
                    // Return the enhanced composition
                    return {
                        fragments: finalFragments,
                        metadata: {
                            ...llmResult.metadata,
                            backgroundColor: params.backgroundColor,
                            blendMode: params.blendMode
                        }
                    };
                }
            } catch (error) {
                console.warn('LLM enhancement failed, falling back to standard enhancement:', error);
                // Fall back to standard enhancement if LLM enhancement fails
            }
        }
        
        // If LLM enhancement was not available or failed, use the original method
        return this.enhanceCompositionOriginal(fragments, params);
    }
    
    /**
     * Post-processes LLM-enhanced fragments for consistent rendering
     * @param {Array} fragments - The LLM-enhanced fragments
     * @param {Object} params - Composition parameters
     * @returns {Array} - Post-processed fragments
     */
    postProcessLLMFragments(fragments, params) {
        // Ensure consistent fragment properties for rendering
        fragments.forEach(fragment => {
            // Ensure blend mode is set
            fragment.blendMode = params.blendMode;
            
            // Ensure opacity is properly set
            if (!fragment.opacity) {
                fragment.opacity = fragment.narrativeRole === 'focal' ? 1.0 : 0.8;
            }
            
            // Ensure scale is properly converted to width/height
            if (fragment.scale && fragment.scale !== 1.0) {
                const centerX = fragment.x + fragment.width / 2;
                const centerY = fragment.y + fragment.height / 2;
                
                fragment.width *= fragment.scale;
                fragment.height *= fragment.scale;
                
                // Recenter after scaling
                fragment.x = centerX - fragment.width / 2;
                fragment.y = centerY - fragment.height / 2;
                
                // Remove scale property to avoid double scaling
                delete fragment.scale;
            }
        });
        
        // Sort fragments by depth
        fragments.sort((a, b) => a.depth - b.depth);
        
        return fragments;
    }
    
    /**
     * Original enhanceComposition method (for backwards compatibility)
     * @param {Array} fragments - The fragments to enhance
     * @param {Object} params - Composition parameters
     * @returns {Object} - Enhanced fragments and metadata
     */
    enhanceCompositionOriginal(fragments, params) {
        // Reduce fragment count to target range
        const targetCount = Math.min(
            Math.max(5, Math.floor(Math.random() * 4) + 5),
            fragments.length
        );
        
        // Sort fragments by importance and retain most important ones
        fragments.sort((a, b) => (b.importance || 0) - (a.importance || 0));
        fragments = fragments.slice(0, targetCount);
        
        // Select foreground elements (2-3 larger elements)
        const foregroundCount = Math.min(3, Math.max(2, Math.floor(targetCount * 0.4)));
        const foregroundElements = fragments.slice(0, foregroundCount);
        const backgroundElements = fragments.slice(foregroundCount);
        
        // Identify protagonist from foreground elements
        const protagonist = foregroundElements.find(f => f.role === 'protagonist') || foregroundElements[0];
        
        // Apply narrative composition rules
        this.applyNarrativeRules(foregroundElements, backgroundElements, protagonist, params);
        
        // Apply rotation strategy
        this.applyRotationStrategy(foregroundElements, backgroundElements, protagonist, params);
        
        // Position elements based on composition type
        this.applyCompositionType(foregroundElements, backgroundElements, protagonist, params);
        
        // Enhance depth perception
        this.enhanceDepth(foregroundElements, backgroundElements, params);
        
        // Sort fragments by depth for proper layering
        const allFragments = [...foregroundElements, ...backgroundElements];
        allFragments.sort((a, b) => a.depth - b.depth);
        
        // Return enhanced composition
        return {
            fragments: allFragments,
            backgroundColor: params.backgroundColor,
            blendMode: params.blendMode,
            compositionType: params.compositionType,
            flowPattern: params.flowPattern,
            rotationStrategy: params.rotationStrategy,
            foregroundCount: foregroundElements.length,
            backgroundCount: backgroundElements.length,
            totalElements: allFragments.length
        };
    }

    /**
     * Applies narrative composition rules to the fragments
     * @param {Array} foregroundElements - The foreground elements
     * @param {Array} backgroundElements - The background elements
     * @param {Object} protagonist - The protagonist element
     * @param {Object} params - Composition parameters
     */
    applyNarrativeRules(foregroundElements, backgroundElements, protagonist, params) {
        // Use existing implementation...
        // (Keeping this method unchanged for brevity)
    }
    
    applyRotationStrategy(foregroundElements, backgroundElements, protagonist, params) {
        // Use existing implementation...
        // (Keeping this method unchanged for brevity)
    }
    
    applyCompositionType(foregroundElements, backgroundElements, protagonist, params) {
        // Use existing implementation...
        // (Keeping this method unchanged for brevity)
    }
    
    enhanceDepth(foregroundElements, backgroundElements, params) {
        // Use existing implementation...
        // (Keeping this method unchanged for brevity)
    }
    
    // Keep all other existing methods...
}
